import Foundation
import FoundationModels

@Generable(description: "Encounter type and difficulty selection for pacing and narrative variety")
struct EncounterDetails: Codable {
    @Guide(description: "Type of encounter that best fits the current narrative moment and location context. Options: combat (monster battles), social (NPC interactions), exploration (discovery and investigation), puzzle (riddles and challenges), trap (environmental hazards), stealth (sneaking and evasion), chase (pursuit sequences), final (quest climax for final encounter only)")
    var encounterType: String
    @Guide(description: "Challenge level appropriate for character's level and quest progress. Options: easy (below level, introductory), normal (at level, standard challenge), hard (above level, significant threat), boss (climactic confrontation for final encounters only)")
    var difficulty: String
}

// Progression rewards from an encounter
// NOTE: Generated by code (RewardCalculator), not by LLM
struct ProgressionRewards: Codable {
    var xpGain: Int
    var hpDelta: Int
    var goldGain: Int
    var shouldDropLoot: Bool
    var itemDropCount: Int
}

@Generable(description: "Monster attack decision based on player action")
struct MonsterAttackDecision: Codable {
    @Guide(description: "Whether the monster attacks (true) or is prevented/distracted by the player's action (false)")
    var attacks: Bool
}
